;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline {
    return ($code, $data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_sender((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'sender;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline {
    return (true, $to, $value, 0, $body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: WithdrawUpdate
;; Header: 0x1b911b82
;; TLB: withdraw_update#1b911b82 amount:coins destination:address = WithdrawUpdate
;;

(slice, ((int, slice))) $WithdrawUpdate$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 462494594);
    var v'amount = sc_0~load_coins();
    var v'destination = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'destination));
}

((int, slice)) $WithdrawUpdate$_tensor_cast((int, slice) v) asm """
    NOP
""";

;;
;; Type: JettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: jetton_transfer#0f8a7ea5 queryId:uint64 amount:coins destination:address responseDestination:Maybe address customPayload:Maybe ^cell forwardTonAmount:coins forwardPayload:remainder<slice> = JettonTransfer
;;

builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'queryId, v'amount, v'destination, v'responseDestination, v'customPayload, v'forwardTonAmount, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    build_0 = ~ null?(v'customPayload) ? build_0.store_int(true, 1).store_ref(v'customPayload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forwardTonAmount);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $JettonTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $JettonTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(int $queryId, int $amount, slice $destination, slice $responseDestination, cell $customPayload, int $forwardTonAmount, slice $forwardPayload) inline {
    return ($queryId, $amount, $destination, $responseDestination, $customPayload, $forwardTonAmount, $forwardPayload);
}

;;
;; Type: JettonTransferNotification
;; Header: 0x7362d09c
;; TLB: jetton_transfer_notification#7362d09c queryId:uint64 amount:coins sender:address forwardPayload:remainder<slice> = JettonTransferNotification
;;

(slice, ((int, int, slice, slice))) $JettonTransferNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'forwardPayload = sc_0;
    return (sc_0, (v'queryId, v'amount, v'sender, v'forwardPayload));
}

;;
;; Type: JettonWalletData
;; TLB: _ balance:coins ownerAddress:address jettonMasterAddress:address jettonWalletCode:^cell = JettonWalletData
;;

builder $JettonWalletData$_store(builder build_0, (int, slice, slice, cell) v) inline {
    var (v'balance, v'ownerAddress, v'jettonMasterAddress, v'jettonWalletCode) = v;
    build_0 = build_0.store_coins(v'balance);
    build_0 = __tact_store_address(build_0, v'ownerAddress);
    build_0 = __tact_store_address(build_0, v'jettonMasterAddress);
    build_0 = build_0.store_ref(v'jettonWalletCode);
    return build_0;
}

cell $JettonWalletData$_store_cell((int, slice, slice, cell) v) inline {
    return $JettonWalletData$_store(begin_cell(), v).end_cell();
}

((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_ownerAddress_jettonMasterAddress_jettonWalletCode(int $balance, slice $ownerAddress, slice $jettonMasterAddress, cell $jettonWalletCode) inline {
    return ($balance, $ownerAddress, $jettonMasterAddress, $jettonWalletCode);
}

;;
;; Type: MimiappContract
;;

builder $MimiappContract$_store(builder build_0, (slice, slice, cell, int, int, slice, int) v) inline {
    var (v'owner, v'tokenAddress, v'recipients, v'totalWithdrawn, v'totalClaimed, v'myJettonWalletAddress, v'myJettonAmount) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'tokenAddress);
    build_0 = build_0.store_dict(v'recipients);
    build_0 = build_0.store_int(v'totalWithdrawn, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'totalClaimed, 257);
    build_1 = __tact_store_address(build_1, v'myJettonWalletAddress);
    build_1 = build_1.store_coins(v'myJettonAmount);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, cell, int, int, slice, int))) $MimiappContract$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'tokenAddress = sc_0~__tact_load_address();
    var v'recipients = sc_0~load_dict();
    var v'totalWithdrawn = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'totalClaimed = sc_1~load_int(257);
    var v'myJettonWalletAddress = sc_1~__tact_load_address();
    var v'myJettonAmount = sc_1~load_coins();
    return (sc_0, (v'owner, v'tokenAddress, v'recipients, v'totalWithdrawn, v'totalClaimed, v'myJettonWalletAddress, v'myJettonAmount));
}

(slice, ((slice, cell))) $MimiappContract$init$_load(slice sc_0) inline {
    var v'tokenAddress = sc_0~__tact_load_address();
    var v'jettonWalletCode = sc_0~load_ref();
    return (sc_0, (v'tokenAddress, v'jettonWalletCode));
}

(slice, slice, cell, int, int, slice, int) $MimiappContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MimiappContract$_load();
    } else {
        (slice $tokenAddress, cell $jettonWalletCode) = $sc~$MimiappContract$init$_load();
        $sc.end_parse();
        return $MimiappContract$_contract_init($tokenAddress, $jettonWalletCode);
    }
}

() $MimiappContract$_contract_store((slice, slice, cell, int, int, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MimiappContract$_store(b, v);
    set_data(b.end_cell());
}