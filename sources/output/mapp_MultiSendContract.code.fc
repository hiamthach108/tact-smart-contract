#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "mapp_MultiSendContract.headers.fc";
#include "mapp_MultiSendContract.stdlib.fc";
#include "mapp_MultiSendContract.constants.fc";
#include "mapp_MultiSendContract.storage.fc";

;;
;; Contract MultiSendContract functions
;;

(slice, slice, cell) $MultiSendContract$_contract_init(slice $tokenAddress) impure inline_ref {
    var (($self'owner, $self'tokenAddress, $self'recipients)) = (null(), null(), null());
    $self'owner = $Context$_get_sender(__tact_context_get());
    $self'tokenAddress = $tokenAddress;
    return ($self'owner, $self'tokenAddress, $self'recipients);
}

((slice, slice, cell), ()) $MultiSendContract$_fun_multiSend((slice, slice, cell) $self, cell $recipients) impure inline_ref {
    var (($self'owner, $self'tokenAddress, $self'recipients)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    var ($recipient, $amount, $fresh$flag_6) = __tact_dict_min_slice_int($recipients, 267, 257);
    while ($fresh$flag_6) {
        tuple $cmt = __tact_string_builder_start_comment();
        int $old = __tact_dict_get_slice_int($self'recipients, 267, $recipient, 257);
        if (null?($old)) {
            $self'recipients~__tact_dict_set_slice_int(267, $recipient, $amount, 257);
        } else {
            int $new = (__tact_not_null($old) + $amount);
            $self'recipients~__tact_dict_set_slice_int(267, $recipient, $new, 257);
        }
        ($recipient, $amount, $fresh$flag_6) = __tact_dict_next_slice_int($recipients, 267, $recipient, 257);
    }
    ($self'owner, $self'tokenAddress, $self'recipients)~$MultiSendContract$_fun_reply(__gen_cell_comment_8ce5c8027b6d8bd6084aedd3411e4d8d7f1ad449598bfb3088fefafd7774b02e());
    return (($self'owner, $self'tokenAddress, $self'recipients), ());
}

((slice, slice, cell), cell) $MultiSendContract$_fun_recipients((slice, slice, cell) $self) impure inline_ref {
    var (($self'owner, $self'tokenAddress, $self'recipients)) = $self;
    var $fresh$ret_7 = $self'recipients;
    return (($self'owner, $self'tokenAddress, $self'recipients), $fresh$ret_7);
}

((slice, slice, cell), int) $MultiSendContract$_fun_claimableToken((slice, slice, cell) $self, slice $addr) impure inline_ref {
    var (($self'owner, $self'tokenAddress, $self'recipients)) = $self;
    int $amount = __tact_dict_get_slice_int($self'recipients, 267, $addr, 257);
    if (null?($amount)) {
        var $fresh$ret_8 = 0;
        return (($self'owner, $self'tokenAddress, $self'recipients), $fresh$ret_8);
    }
    var $fresh$ret_9 = __tact_not_null($amount);
    return (($self'owner, $self'tokenAddress, $self'recipients), $fresh$ret_9);
}

;;
;; Receivers of a Contract MultiSendContract
;;

(((slice, slice, cell)), ()) $MultiSendContract$_internal_binary_MultiSend((slice, slice, cell) $self, (cell) $msg) impure inline {
    var ($self'owner, $self'tokenAddress, $self'recipients) = $self;
    var ($msg'recipients) = $msg;
    ($self'owner, $self'tokenAddress, $self'recipients)~$MultiSendContract$_fun_multiSend($msg'recipients);
    return (($self'owner, $self'tokenAddress, $self'recipients), ());
}

(((slice, slice, cell)), ()) $MultiSendContract$_internal_binary_Deploy((slice, slice, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'tokenAddress, $self'recipients) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'tokenAddress, $self'recipients)~$MultiSendContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'tokenAddress, $self'recipients), ());
}

;;
;; Get methods of a Contract MultiSendContract
;;

_ %recipients() method_id(84049) {
    var self = $MultiSendContract$_contract_load();
    var res = self~$MultiSendContract$_fun_recipients();
    return res;
}

_ %claimableToken(slice $addr) method_id(84504) {
    slice $addr = __tact_verify_address($addr);
    var self = $MultiSendContract$_contract_load();
    var res = self~$MultiSendContract$_fun_claimableToken($addr);
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MultiSendContract
;;

((slice, slice, cell), int) $MultiSendContract$_contract_router_internal((slice, slice, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive MultiSend message
    if (op == 1492397047) {
        var msg = in_msg~$MultiSend$_load();
        self~$MultiSendContract$_internal_binary_MultiSend(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$MultiSendContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MultiSendContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$MultiSendContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MultiSendContract$_contract_store(self);
}
